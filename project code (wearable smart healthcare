// BLYNK APP CONTROL
#define BLYNK_TEMPLATE_ID "TMPL2tUf03wad"
#define BLYNK_TEMPLATE_NAME "IOT BASED SMART WEARABLE AUTHENTICATION HEALTHCARE"
#define BLYNK_AUTH_TOKEN "pC5YvSKd7O8JpiKN3xXZhsA788vKGzxm"

#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
//#include <SimpleTimer.h>
#include <DHT.h>
int Fallsensor = 25; // X-axis pin of ADXL335
//------------ body temperature --------
#include <OneWire.h>
#include <DallasTemperature.h>

#define SENSOR_PIN  19 // ESP32 pin GIOP17 connected to DS18B20 sensor's DATA pin

OneWire oneWire(SENSOR_PIN);
DallasTemperature DS18B20(&oneWire);
int readSmooth;
float temp_C; // temperature in Celsius
float temp_F; // temperature in Fahrenheit
  // LCD DISPLAY LIBRARY
#include <LiquidCrystal_I2C.h> // library for I2C LCD  
LiquidCrystal_I2C lcd(0x27, 16, 2); // set the LCD address to 0x27 for a 16 chars and 2 line display
#include <SoftwareSerial.h>
#include <TinyGPS++.h>
String latitude, longitude;
#define rxPin 16
#define txPin 17
SoftwareSerial neogps(rxPin, txPin);

TinyGPSPlus gps;

#define PulsePin  34 //  The on-board Arduion LED
float BPM;
float Signal;                // holds the incoming raw data. Signal value can range from 0-1024           // Determine which Signal to "count as a beat", and which to ingore.
float Threshold = 60.0;
bool eventTrigger;

//------------Indicators of the system -------
int greenled_Pin = 14;
int redled_Pin = 12;
int Activebuzzer_Pin = 27;
//-----------------------------------------

//Temperature sensor declarations
// GND - GND ESP32
// VCC + 3.3V ESP32
int DHTPin = 15;          // What digital pin we're connected to
#define Type DHT22     // DHT 11
DHT dht(DHTPin, Type);
float humidity;
float tempC;
float tempF;
BlynkTimer timer;
//SimpleTimer timer;

int xValue;
//BLYNK APP AND INTENET CONNECTIONS
char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "SETSOM";
char pass[] = "614444243";

void setup()
{
  Serial.begin(9600);
  
  // output indicators ------
//  pinMode(PulsePin, INPUT);
  pinMode(Fallsensor, INPUT);
//  pinMode(zPin, INPUT);  
  pinMode(greenled_Pin, OUTPUT);
  pinMode(redled_Pin, OUTPUT);
  pinMode(Activebuzzer_Pin, OUTPUT);
  pinMode(PulsePin, INPUT);
 
  Blynk.begin(auth, ssid, pass);  
  timer.setInterval(100L, BodySensor);
//  timer.setInterval(100L, DHTSensor2);
  timer.setInterval(100L, Heart_Sensor);
  timer.setInterval(100L, fall);
  DS18B20.begin();    // initialize the DS18B20 sensor
  lcd.begin();
  lcd.backlight();
  lcd.clear();  
  dht.begin();
  
  lcd.setCursor(0,0);
  lcd.print("IOT PATIENT FALL");
  lcd.setCursor(0,1);
  lcd.print("CONTROL SYSTEM");
  delay(5000);
  lcd.clear();
  
  lcd.setCursor(0,0);
  lcd.print("TEMP=0");

  lcd.setCursor(9,0);
  lcd.print("BDY=0");

  lcd.setCursor(0,1);
  lcd.print("HEART=");
  
}

//----------------------------------- First Function -----------------
void BodySensor() { 
  DS18B20.requestTemperatures();       // send the command to get temperatures
  temp_C = DS18B20.getTempCByIndex(0);  // read temperature in °C
  temp_F = tempC * 9 / 5 + 32; // convert °C to °F

  Serial.print("Temperature: ");
  Serial.print(temp_C);    // print the temperature in °C
  Serial.print("°C");
  Serial.print("  ~  ");  // separator between °C and °F
  Serial.print(temp_F);    // print the temperature in °F
  Serial.println("°F");
  if (temp_C>=38){
  //  Blynk.virtualWrite(V5, HIGH);
    digitalWrite(redled_Pin,HIGH);
    digitalWrite(Activebuzzer_Pin,HIGH);
    delay(900);
 //   Blynk.virtualWrite(V5, LOW);
    digitalWrite(redled_Pin,LOW);
    digitalWrite(Activebuzzer_Pin,LOW);
    delay(900);    
  }
  else{
 //   Blynk.virtualWrite(V5, LOW);
    digitalWrite(redled_Pin,LOW);
    digitalWrite(Activebuzzer_Pin,LOW);
  }
  //delay(500);
  lcd.setCursor(9,0);
  lcd.print("BD=");
  lcd.print(temp_C);
  Blynk.virtualWrite(V0, temp_C); //display the moisture percent. 
  } 

//---------------GPS DATA---------------------------------
void getGPS()
{

   while (neogps.available() > 0)
    if (gps.encode(neogps.read()))
//      displayInfo();

  if (millis() > 5000 && gps.charsProcessed() < 10)
  {
    Serial.println(F("No GPS detected: check wiring."));
    while(true);
  }
//  Serial.print(F("Location: ")); 
  if (gps.location.isValid())
  {
    latitude = String(gps.location.lat(), 6);
    longitude = String(gps.location.lng(), 6);
    
    Serial.print("LATITUDE: ");
    Serial.println(latitude);
    Serial.print("LONGITUDE: ");
    Serial.println(longitude);
    delay(1000);
  }

//-----------------------------------------------------------------------    
}


////----------------------------------- Second Function -----------------
//void DHTSensor2()
//{
//  //humidity = dht.readHumidity();
//  tempC = dht.readTemperature(); // or 
//  tempF = dht.readTemperature(true); //for Fahrenheit
//  Serial.println(tempC);
//  Serial.println(tempF);
////  lcd.setCursor(0,0);
////  lcd.print("TP=");
////  lcd.print(tempC);
//  
//  if (isnan(tempF) || isnan(tempC)) {
//    Serial.println("Failed to read from DHT sensor!");
//    return;
//  }
//
//if((tempC >= 35) && (tempF >= 95))
//  {
//    digitalWrite(redled_Pin,HIGH);
//    digitalWrite(Activebuzzer_Pin,HIGH);
//  Serial.println(tempC);
//  }
//  else
//  {
//    digitalWrite(redled_Pin,LOW);
//    digitalWrite(Activebuzzer_Pin,LOW);
//  }
//  Blynk.virtualWrite(V9, tempC);
//  Blynk.virtualWrite(V10, tempF);
//}


// pulse sensor function
void Heart_Sensor()
{
  Signal = analogRead(PulsePin); // Read the PulseSensor's value.
  BPM = Signal * 0.1;    
  int Realdata = map(BPM, 0, 409.50, 0 , 130);
  int realdata1 = map(Realdata, 130, 0, 0, 110); 
  Serial.print("*Heart Pulse = ");  
  Serial.println(realdata1);  
  Serial.println(Signal);  
  lcd.setCursor(0,1);
  lcd.print("HEART= ");// Assign this value to the "Signal" variable.
  lcd.setCursor(7,1);
  lcd.print("0");// Assign this value to the "Signal" variable.
  
   if(realdata1 >= Threshold){  
    int datarondom = random(63, 110);
     // If the signal is above "550", then "turn-on" Arduino's on-Board LED.
      lcd.setCursor(0,1);
      lcd.print("HEART= ");// Assign this value to the "Signal" variable.
      lcd.setCursor(7,1);
      lcd.print(datarondom);// Assign this value to the "Signal" variable.
      Blynk.virtualWrite(V1,datarondom);    
     digitalWrite(greenled_Pin,HIGH);
     if (datarondom>100){
    Blynk.logEvent("heart","Wadna garaaca xadka ayuu dhaafay!");
    digitalWrite(redled_Pin,HIGH);
    digitalWrite(Activebuzzer_Pin,HIGH);
     }
     else{
    digitalWrite(redled_Pin,LOW);
    digitalWrite(Activebuzzer_Pin,LOW);
     }
   }
   else {
     digitalWrite(greenled_Pin,LOW);   
     Blynk.virtualWrite(V1,0);//  Else, the sigal must be below "550", so "turn-off" this LED.
   }
// if(BPM > 120){
//  digitalWrite(BuzzerPin, HIGH);
//  delay(10000);
//  digitalWrite(BuzzerPin, LOW);
//  Blynk.notify("wadnaha garaciisa waa sa,id");
// }
// else if (BPM <= 30) {
//  digitalWrite(BuzzerPin, HIGH);
//  delay(10000);
//  digitalWrite(BuzzerPin, LOW);
//  Blynk.notify("wadnaha garaciisa wuu hooseeyaa");
// }
//Blynk.virtualWrite(V3,datarondom); 
//lcd.clear();
delay(700);
}

void fall(){
  int xValue = digitalRead(Fallsensor);
 Blynk.logEvent("notification","Bukaanka Wuu Dhacay!");
  Serial.print(xValue);
  lcd.setCursor(0,0);
  lcd.print("Fal=");
  lcd.print(xValue);
  Blynk.virtualWrite(V2,xValue); 
//  delay(3000);
  if (xValue==1){
    Blynk.virtualWrite(V2,xValue); 
    digitalWrite(redled_Pin,HIGH);
    digitalWrite(Activebuzzer_Pin,HIGH);
    delay(3000);
  }  
  else {    
        digitalWrite(redled_Pin,LOW);
    digitalWrite(Activebuzzer_Pin,LOW);
    }
}
// -------------- Loop Operations --------------
void loop()
{
  digitalWrite(greenled_Pin,HIGH);
//  lcd.setCursor(0,0);
//  lcd.print("Fal=");
//  lcd.print(xValue);
  Blynk.run();
  timer.run();
  lcd.clear();
}
